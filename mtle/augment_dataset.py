import argparse
from typing import List, Tuple
import pandas as pd

from utils.io_csv import load_csv, save_csv

def split_list(s: str, sep: str) -> List[str]:
    return [x.strip() for x in s.split(sep) if x.strip()]

def normalize_spaces(s: str) -> str:
    return s.replace(" ", "")


def add_llm_data(in_csv: str, out_csv: str) -> None:
    """Add data generated by the LLM to the original dataset."""
    df = load_csv(in_csv)
    required = {"sent", "label", "llm_sent", "llm_label"}
    miss = required.difference(df.columns)
    if miss:
        raise ValueError(f"Missing required columns: {sorted(miss)}")

    records: List[Tuple[str, str]] = []
    n = len(df)

    for i, row in df.iterrows():
        base_sent = str(row["sent"])
        base_label = str(row["label"])
        records.append((base_sent, base_label, "original"))

        llm_sent = row["llm_sent"]
        llm_label = row["llm_label"]
        if not (pd.notna(llm_sent) and pd.notna(llm_label)):
            continue

        llm_sents = split_list(str(llm_sent), ",")
        llm_labels = split_list(str(llm_label), ",")

        seen = {base_sent}
        if i + 1 < n:
            seen.add(str(df.at[i + 1, "sent"]))

        for cand, lab in list(zip(llm_sents, llm_labels))[:6]:
            if cand not in seen and lab in {"0", "1"}:
                records.append((normalize_spaces(cand), lab, "llm_generated"))
                seen.add(cand)

    out_df = pd.DataFrame(records, columns=["sent", "label", "source"])
    save_csv(out_df, out_csv, index=True)


def main():
    p = argparse.ArgumentParser()
    p.add_argument("-i", "--input", required=True)
    p.add_argument("-o", "--output", required=True)
    args = p.parse_args()
    add_llm_data(args.input, args.output)

if __name__ == "__main__":
    main()
